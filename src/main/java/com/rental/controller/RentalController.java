package com.rental.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.rental.dto.CreateRentalDTO;
import com.rental.dto.RentalDTO;
import com.rental.dto.RentalResponse;
import com.rental.dto.UpdateRentalDTO;
import com.rental.service.AuthService;
import com.rental.service.RentalService;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

/**
 * Contr√¥leur pour g√©rer les endpoints REST li√©s aux locations.
 * Permet de r√©cup√©rer, cr√©er et mettre √† jour des locations, ainsi que d'associer des images.
 */

@RestController
@RequestMapping("/api/rentals")
@Tag(name = "Locations", description = "Endpoints pour g√©rer les locations")
public class RentalController {

    private static final Logger logger = Logger.getLogger(RentalController.class.getName());

    private final RentalService rentalService;
    private final AuthService authService;

    /**
     * Constructeur pour injecter les d√©pendances.
     *
     * @param rentalService Instance du service de gestion des locations.
     * @param authService Instance du service d'authentification.
     */
    @Autowired
    public RentalController(RentalService rentalService, AuthService authService) {
        this.rentalService = rentalService;
        this.authService = authService;
    }

    /**
     * Endpoint pour r√©cup√©rer la liste de toutes les locations.
     *
     * @return Liste des locations sous forme de DTO.
     */
    @Operation(summary = "R√©cup√©rer toutes les locations", description = "Retourne la liste compl√®te des locations disponibles.")
    @ApiResponse(responseCode = "200", description = "Liste des locations r√©cup√©r√©e avec succ√®s.")
    @GetMapping
    public ResponseEntity<Map<String, Object>> getAllRentals() {
        logger.info("R√©cup√©ration de toutes les locations.");

         // R√©cup√©ration des locations en tant que liste de DTO
        List<RentalDTO> rentals = rentalService.getAllRentals();

        // Cr√©ation de la r√©ponse avec la cl√© "rentals"
        Map<String, Object> response = new HashMap<>();
        response.put("rentals", rentals);

        return ResponseEntity.ok(response);
    }

     /**
     * Endpoint pour r√©cup√©rer une location sp√©cifique par son ID.
     *
     * @param id Identifiant de la location.
     * @return DTO contenant les d√©tails de la location.
     */
    @Operation(summary = "R√©cup√©rer une location par ID", description = "Retourne les d√©tails d'une location sp√©cifique.")
    @ApiResponse(responseCode = "200", description = "Location r√©cup√©r√©e avec succ√®s.")
    @ApiResponse(responseCode = "404", description = "Location non trouv√©e.")
    @GetMapping("/{id}")
    public ResponseEntity<RentalDTO> getRentalById(@PathVariable Long id) {
        logger.info("R√©cup√©ration des d√©tails de la location avec ID : " + id);
        RentalDTO rentalDTO = rentalService.getRental(id);
        if (rentalDTO != null) {
            return ResponseEntity.ok(rentalDTO);
        } else {
            logger.warning("La location avec ID " + id + " n'a pas √©t√© trouv√©e.");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
    
    /**
     * Endpoint pour cr√©er une nouvelle location.
     *
     * @param createRentalDTO Donn√©es pour cr√©er la location.
     * @param picture Fichier image de la location (optionnel).
     * @return DTO de la location cr√©√©e.
     */
    @Operation(summary = "Cr√©er une nouvelle location", description = "Permet de cr√©er une location et d'associer une image.")
    @ApiResponse(responseCode = "200", description = "Location cr√©√©e avec succ√®s.")
    @ApiResponse(responseCode = "400", description = "Mauvaises donn√©es fournies.")
    @PostMapping(consumes = { "multipart/form-data" })
    public ResponseEntity<RentalResponse> createRental(
            @ModelAttribute CreateRentalDTO createRentalDTO,
            @RequestParam(value = "image", required = false) MultipartFile picture) {

        logger.info("Donn√©es re√ßues pour la cr√©ation d'une location : " + createRentalDTO);
        logger.info("üîπ Requ√™te re√ßue pour cr√©er une location.");

        // V√©rifier si l'image est pr√©sente dans la requ√™te
        if (picture != null && !picture.isEmpty()) {
            logger.info("üì∑ Image re√ßue : " + picture.getOriginalFilename() +
                    " | Taille : " + picture.getSize() + " octets | Type : " + picture.getContentType());
        } else {
            logger.warning("Aucune image n'a √©t√© fournie.");
        }

        // R√©cup√©rer l'ID de l'utilisateur authentifi√©
        Long ownerId = authService.getAuthenticatedUserId();
        logger.info("Utilisateur authentifi√© avec ID : " + ownerId);

        // Appeler le service pour cr√©er la location
        RentalDTO rentalDTO = rentalService.createRental(createRentalDTO, picture, ownerId);
        logger.info("Location cr√©√©e avec succ√®s : " + rentalDTO);

        // Cr√©er la r√©ponse
        RentalResponse rentalResponse = new RentalResponse("Location cr√©√©e avec succ√®s", rentalDTO);

        // Retourner la r√©ponse
        return new ResponseEntity<>(rentalResponse, HttpStatus.CREATED);
    }

    /**
     * Endpoint pour mettre √† jour une location existante.
     *
     * @param id Identifiant de la location √† mettre √† jour.
     * @param updateRentalDTO Donn√©es mises √† jour pour la location.
     * @return DTO de la location mise √† jour.
     */
    @Operation(summary = "Mettre √† jour une location", description = "Permet de mettre √† jour les informations d'une location.")
    @ApiResponse(responseCode = "200", description = "Location mise √† jour avec succ√®s.")
    @ApiResponse(responseCode = "401", description = "Non autoris√©e.")
    @PutMapping(value = "/{id}", consumes = { "multipart/form-data" })
    public ResponseEntity<RentalResponse> updateRental(
            @PathVariable Long id,
            @ModelAttribute UpdateRentalDTO updateRentalDTO) {

        logger.info("Donn√©es re√ßues pour la mise √† jour de la location avec ID : " + id);

        // Appeler le service pour mettre √† jour la location
        RentalDTO updatedRentalDTO = rentalService.updateRental(id, updateRentalDTO);

        if (updatedRentalDTO != null) {
            logger.info("Location mise √† jour avec succ√®s : " + updatedRentalDTO);
            RentalResponse rentalResponse = new RentalResponse("Location mise √† jour avec succ√®s", updatedRentalDTO);
            return ResponseEntity.ok(rentalResponse);
        } else {
            logger.warning("La location avec ID " + id + " n'a pas √©t√© trouv√©e pour mise √† jour.");
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }
}